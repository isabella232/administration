{% block sw_condition_base_field_condition %}
{% endblock %}

{% block sw_condition_base_fields %}
    {% block sw_product_stream_filter_field_select %}
        <template v-if="!isApi()">
            <sw-select v-for="definition, index in definitions"
                       :key="index"
                       :store="getDefinitionStore(definition)"
                       v-model="fields[index].name"
                       itemValueKey="name"
                       displayName="label"
                       :id="createId()"
                       :previewResultsLimit="500"
                       class="field--condition has-arrow"
                       :required="true"
                       @input="selectFilter(index, $event)">
            </sw-select>
        </template>
        <template v-else>
            <div v-for="field in actualCondition.field.split('.')"
                 class="field--condition condition--api">
                <div class="condition--api-value">{{ field }}</div>
            </div>
        </template>
    {% endblock %}

    {% block sw_product_stream_filter_type_select %}
        <sw-select :store="getTypeStore()"
                   v-model="type"
                   :id="createId()"
                   itemValueKey="type"
                   displayName="name"
                   :criteria="typeCriteria"
                   :required="true"
                   class="field--operator has--arrow"
                   @input="selectType">
        </sw-select>
    {% endblock %}

    {% block sw_product_stream_filter_single_value %}
        <sw-select v-if="lastField.name === 'id' && isEquals(actualCondition.type)"
                   :store="getStore(definition.name)"
                   :id="createId()"
                   class="field--main"
                   :required="true"
                   v-model="actualCondition.value">
        </sw-select>
    {% endblock %}

    {% block sw_product_stream_filter_multi_value %}
        <sw-condition-value v-else-if="lastField.name === 'id' && isEqualsAny(actualCondition.type)"
                            multi
                            :store="getStore(definition.name)"
                            :id="createId()"
                            class="field--main"
                            v-model="multiValues"
                            :required="true"
                            @input="updateMultiValue">
        </sw-condition-value>
    {% endblock %}

    {% block sw_product_stream_filter_multi_tagged_value %}
        <sw-tagged-field v-else-if="isEqualsAny(actualCondition.type)"
                         v-model="multiValues"
                         class="field--main"
                         @input="updateTaggedValue">
        </sw-tagged-field>
    {% endblock %}

    {% block sw_product_stream_filter_range_fields %}
        <template v-else-if="actualCondition.type == 'range'">
            {% block sw_product_stream_filter_range_field_gte %}
                <sw-field type="number"
                          class="field--main has--arrow"
                          v-model="actualCondition.parameters.gte"
                          :placeholder="$tc('global.sw-condition.operator.greaterThanEquals')">
                </sw-field>
            {% endblock %}
            {% block sw_product_stream_filter_range_field_lte %}
                <sw-field type="number"
                          class="field--main"
                          v-model="actualCondition.parameters.lte"
                          :placeholder="$tc('global.sw-condition.operator.lowerThanEquals')">
                </sw-field>
            {% endblock %}
        </template>
    {% endblock %}

    {% block sw_product_stream_filter_type_field %}
        <sw-field v-else
                  :type="getValueFieldByType(lastField.type)"
                  class="field--main"
                  v-model="actualCondition.value">
        </sw-field>
    {% endblock %}
{% endblock %}
